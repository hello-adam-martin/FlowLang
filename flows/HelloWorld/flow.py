"""
Task implementations for HelloWorld
Auto-generated by FlowLang Scaffolder on 2025-10-11 16:05:48

Status: All tasks are STUBS - implement them one by one!

To implement a task:
1. Find the task function below
2. Remove the NotImplementedTaskError
3. Add your implementation
4. Update the implementation status in get_implementation_status()
5. Run tests: pytest tests/test_tasks.py
"""

import asyncio
from typing import Dict, Any
from pathlib import Path
import sys

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from flowlang import TaskRegistry
from flowlang.exceptions import NotImplementedTaskError


def create_task_registry() -> TaskRegistry:
    """Create and populate the task registry with all tasks"""
    registry = TaskRegistry()
    
    # ========================================================================
    # TASK IMPLEMENTATIONS
    # Total: 3 tasks
    # Status: 3 implemented, 0 pending ✅ COMPLETE
    # ========================================================================
    
    @registry.register('GenerateErrorMessage', description='Generate error message for invalid input', implemented=True)
    def generate_error_message(reason):
        """
        GenerateErrorMessage - Generate a user-friendly error message

        Used in steps: error

        Args:
            reason: The validation failure reason

        Returns:
            Dict containing error_message
        """
        error_message = f"Unable to process request: {reason}"
        return {"error_message": error_message}
    
    @registry.register('GenerateGreeting', description='Generate personalized greeting message', implemented=True)
    def generate_greeting(name):
        """
        GenerateGreeting - Create a personalized greeting for the user

        Used in steps: greet

        Args:
            name: User's name to include in greeting

        Returns:
            Dict containing greeting and timestamp
        """
        from datetime import datetime
        greeting = f"Hello, {name}! Welcome to FlowLang."
        timestamp = datetime.now().isoformat()
        return {"greeting": greeting, "timestamp": timestamp}
    
    @registry.register('ValidateUser', description='Validate user name input', implemented=True)
    async def validate_user(name):
        """
        ValidateUser - Validate that the user name is acceptable

        Used in steps: validate

        Args:
            name: User name to validate

        Returns:
            Dict containing is_valid (bool) and validation_message (str)
        """
        # Check if name is empty or too short
        if not name or len(name.strip()) == 0:
            return {
                "is_valid": False,
                "validation_message": "Name cannot be empty"
            }

        # Check if name is too long
        if len(name) > 100:
            return {
                "is_valid": False,
                "validation_message": "Name is too long (max 100 characters)"
            }

        # Valid name
        return {
            "is_valid": True,
            "validation_message": "Name is valid"
        }
    

    return registry


# ========================================================================
# IMPLEMENTATION TRACKER
# ========================================================================

def get_implementation_status() -> Dict[str, Any]:
    """
    Get status of task implementations.
    
    Update this as you implement tasks:
    Change False to True for each completed task.
    """
    tasks = {
        'GenerateErrorMessage': True,  # ✅ Implemented
        'GenerateGreeting': True,  # ✅ Implemented
        'ValidateUser': True,  # ✅ Implemented
    }
    
    implemented = sum(1 for v in tasks.values() if v)
    total = len(tasks)
    
    return {
        'total': total,
        'implemented': implemented,
        'pending': total - implemented,
        'progress': f'{implemented}/{total}',
        'percentage': (implemented / total * 100) if total > 0 else 0,
        'tasks': tasks
    }


def print_status():
    """Print implementation status to console"""
    status = get_implementation_status()
    print("="*60)
    print(f"📊 HelloWorld - Task Implementation Status")
    print("="*60)
    print(f"Total Tasks: {status['total']}")
    print(f"Implemented: {status['implemented']} ✅")
    print(f"Pending: {status['pending']} ⚠️")
    print(f"Progress: {status['progress']} ({status['percentage']:.1f}%)")
    print("="*60)
    
    if status['pending'] > 0:
        print("\n⚠️  Pending Tasks:")
        for task, implemented in sorted(status['tasks'].items()):
            if not implemented:
                print(f"  [ ] {task}")
    
    if status['implemented'] > 0:
        print("\n✅ Implemented Tasks:")
        for task, implemented in sorted(status['tasks'].items()):
            if implemented:
                print(f"  [✓] {task}")
    
    print()


if __name__ == '__main__':
    print_status()