"""
Scheduled Report Flow - Example Tasks

This flow demonstrates schedule triggers that execute automatically on a cron schedule.
"""

from flowlang import TaskRegistry
from datetime import datetime
import json
import uuid


def create_task_registry():
    """Create and return the task registry with all task implementations"""
    registry = TaskRegistry()

    @registry.register('GetCurrentTime', description='Get current timestamp')
    async def get_current_time():
        """Get the current time in multiple formats"""
        now = datetime.now()

        return {
            'timestamp': now.timestamp(),
            'formatted_time': now.strftime('%Y-%m-%d %H:%M:%S')
        }

    @registry.register('GenerateReport', description='Generate a report with schedule metadata')
    async def generate_report(timestamp: float, trigger_info: dict = None):
        """
        Generate a report with schedule information.

        Args:
            timestamp: Unix timestamp when report was initiated
            trigger_info: Schedule trigger metadata from _schedule input
        """
        report_id = str(uuid.uuid4())

        # Extract schedule info if available
        schedule_info = {}
        if trigger_info:
            schedule_info = {
                'trigger_id': trigger_info.get('trigger_id'),
                'cron': trigger_info.get('cron'),
                'scheduled_time': trigger_info.get('scheduled_time'),
                'execution_time': trigger_info.get('execution_time'),
                'timezone': trigger_info.get('timezone')
            }

        report_data = {
            'report_id': report_id,
            'generated_at': datetime.fromtimestamp(timestamp).isoformat(),
            'schedule': schedule_info,
            'data': {
                'status': 'completed',
                'records_processed': 42,
                'summary': 'Automated report generated by schedule trigger'
            }
        }

        return {
            'report_id': report_id,
            'report_data': report_data
        }

    @registry.register('LogReport', description='Log report completion')
    async def log_report(report_id: str, report_data: dict):
        """
        Log the completed report.

        Args:
            report_id: Unique report identifier
            report_data: Complete report data
        """
        # In a real application, this would write to a log file or database
        print("=" * 60)
        print(f"SCHEDULED REPORT COMPLETED")
        print("=" * 60)
        print(f"Report ID: {report_id}")
        print(f"Generated: {report_data.get('generated_at')}")

        if report_data.get('schedule'):
            print(f"\nSchedule Info:")
            schedule = report_data['schedule']
            print(f"  Trigger: {schedule.get('trigger_id')}")
            print(f"  Cron: {schedule.get('cron')}")
            print(f"  Scheduled: {schedule.get('scheduled_time')}")
            print(f"  Executed: {schedule.get('execution_time')}")
            print(f"  Timezone: {schedule.get('timezone')}")

        print(f"\nReport Data:")
        print(json.dumps(report_data.get('data'), indent=2))
        print("=" * 60)

        return {'logged': True}

    return registry
