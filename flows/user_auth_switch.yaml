flow: UserAuthSwitch
description: User authentication with switch/case - cleaner multi-way branching
silent: true  # Hide internal checks by default - only show user-facing operations

inputs:
  - name: email
    type: string
    required: true
    description: User email address

  - name: password
    type: string
    required: true
    description: User password

  - name: name
    type: string
    required: false
    description: Full name (required for new registrations)

steps:
  # Step 1: Determine user status in a single check
  - task: DetermineUserStatus
    id: user_status
    inputs:
      email: ${inputs.email}
      password: ${inputs.password}
    outputs:
      - status  # Returns: "valid_user", "invalid_password", "new_user"
      - user_id
      - exists

  # Step 2: Multi-way branching based on status
  - switch: ${user_status.status}
    cases:
      # ========================================
      # CASE 1: Valid Existing User
      # ========================================
      - when: "valid_user"
        do:
          # Valid credentials - fetch user data in parallel
          - parallel:
              - task: FetchUserProfile
                id: profile
                silent: false  # Show profile fetch
                inputs:
                  email: ${inputs.email}
                outputs:
                  - user_data

              - task: FetchUserPreferences
                id: preferences
                # Inherits silent: true - hide preferences fetch
                inputs:
                  email: ${inputs.email}
                outputs:
                  - prefs

          # Generate authentication token
          - task: GenerateAuthToken
            id: token
            silent: false  # Show token generation
            inputs:
              email: ${inputs.email}
              user_id: ${user_status.user_id}
            outputs:
              - token

      # ========================================
      # CASE 2: Invalid Password
      # ========================================
      - when: "invalid_password"
        do:
          # Log failed login attempt
          - task: LogFailedLogin
            id: log_failure
            # Inherits silent: true - hide logging
            inputs:
              email: ${inputs.email}
              reason: invalid_password

          # Could add rate limiting check
          - task: CheckRateLimit
            id: rate_limit
            inputs:
              email: ${inputs.email}
            outputs:
              - locked

      # ========================================
      # CASE 3: New User Registration
      # ========================================
      - when: "new_user"
        do:
          - task: ValidateRegistration
            id: validate_reg
            silent: false  # Show validation step
            inputs:
              email: ${inputs.email}
              password: ${inputs.password}
              name: ${inputs.name}
            outputs:
              - valid
              - validation_errors

          - task: CreateUserAccount
            id: create_user
            silent: false  # Show account creation
            inputs:
              email: ${inputs.email}
              password: ${inputs.password}
              name: ${inputs.name}
            outputs:
              - user_id
              - user_data

          - task: SendWelcomeEmail
            id: welcome_email
            silent: false  # Show welcome email
            inputs:
              email: ${inputs.email}
              name: ${inputs.name}
            outputs:
              - sent

          # Generate authentication token for new user
          - task: GenerateAuthToken
            id: token
            silent: false  # Show token generation
            inputs:
              email: ${inputs.email}
              user_id: ${create_user.user_id}
            outputs:
              - token

      # ========================================
      # CASE 4: Multiple failure states
      # ========================================
      - when: ["account_locked", "account_suspended"]
        do:
          - task: LogBlockedAccess
            id: log_blocked
            inputs:
              email: ${inputs.email}
              status: ${user_status.status}

          - task: NotifySecurityTeam
            id: security_alert
            inputs:
              email: ${inputs.email}
              reason: ${user_status.status}

      # ========================================
      # DEFAULT: Unknown Status
      # ========================================
      - default:
          - task: LogUnknownStatus
            id: log_unknown
            inputs:
              email: ${inputs.email}
              status: ${user_status.status}

          - task: SendErrorAlert
            id: error_alert
            inputs:
              context: user_authentication
              status: ${user_status.status}

outputs:
  - name: success
    value: true

  - name: auth_token
    value: ${token.token}

  - name: user_status
    value: ${user_status.status}

  - name: is_new_user
    value: ${user_status.exists}
